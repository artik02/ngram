// MIT LICENSE
//
// Copyright 2024 artik02
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the “Software”), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//! # NGRAM
//!
//! `ngram` is a cross-platform application designed to efficiently solve **nonograms** using a **genetic algorithm**.
//!
//! This tool automates the process of solving these logical puzzles, providing quick and accurate solutions.
//! It is ideal for both casual players and developers interested in artificial intelligence applied to puzzles.
//!
//! Nonograms are graphic logical puzzles where you must fill a grid of cells with different colors based on numeric clues.
//! `ngram` uses a *bio-inspired algorithm* to find optimal solutions to these puzzles efficiently.

/// Application-level dependencies and libraries for building the UI and managing the app's lifecycle.
use dioxus::logger::tracing::{info, Level};
use dioxus::prelude::*;

/// Internationalization (i18n) support for the application.
use dioxus_i18n::prelude::*;
use dioxus_i18n::t;

/// Path to the main CSS file containing global styles for the application.
const MAIN_CSS: Asset = asset!("/assets/main.css");

/// Path to the Tailwind CSS file generated by the Tailwind compiler.
const TAILWIND_CSS: Asset = asset!("/assets/tailwind.css");

/// Module containing logic, user interfaces, and helper functions for working with Nonogram puzzles.
pub mod nonogram {
    /// User interface components for the Nonogram application.
    pub mod component;
    /// Data definitions for Nonogram puzzles, including palettes, solutions, and constraints.
    pub mod definitions;
    /// Implements an evolutionary search algorithm for solving Nonograms.
    pub mod evolutive;
    /// Implements genetic algorithms for solving and optimizing Nonograms.
    pub mod genetic;
    /// Basic implementations for working with definitions in the Nonogram module.
    pub mod implementations;
    /// Helper macros for simplifying the creation of Nonogram-related types.
    pub mod macros;
    /// Predefined puzzles and utility functions for working with them.
    pub mod puzzles;
}

/// Include Nonogram-related components for the application's user interface.
use nonogram::component::{Editor, Solver};

/// Module for managing application localization (i18n), including supported languages.
mod localization {
    use dioxus_i18n::unic_langid::{langid, LanguageIdentifier};

    /// The default language for the application (`en-US`).
    pub const DEF_LANG: LanguageIdentifier = EN_US;
    /// English (United States) language identifier.
    pub const EN_US: LanguageIdentifier = langid!("en-US");
    /// Spanish (Mexico) language identifier.
    pub const ES_MX: LanguageIdentifier = langid!("es-MX");
}

/// Import the localization module into the application scope for managing languages.
use localization::*;

/// Routes available in the application, with associated layouts and components.
#[derive(Routable, Clone)]
enum Route {
    /// Default route for the Nonogram Solver, using the `Header` layout.
    #[layout(Header)]
    #[route("/")]
    Solver {},
    /// Route for the Nonogram Editor, also using the `Header` layout.
    #[route("/editor")]
    Editor {},
}

/// Entry point for the application.
///
/// Initializes logging and launches the Dioxus application.
fn main() {
    dioxus::logger::init(Level::INFO).expect("Dioxus logger failed to init");
    dioxus::launch(App);
}

/// Main application component.
///
/// Handles initialization of internationalization (i18n) and routes.
/// Also includes global stylesheets (main and Tailwind CSS).
#[component]
fn App() -> Element {
    use_init_i18n(|| {
        info!("Initializing i18n");
        I18nConfig::new(DEF_LANG)
            .with_fallback(ES_MX)
            .with_locale(Locale::new_static(
                EN_US,
                include_str!("../fluent/en-US.ftl"),
            ))
            .with_locale(Locale::new_static(
                ES_MX,
                include_str!("../fluent/es-MX.ftl"),
            ))
    });

    rsx! {
        document::Link { rel: "stylesheet", href: MAIN_CSS }
        document::Link { rel: "stylesheet", href: TAILWIND_CSS }
        Router::<Route> {}
    }
}

/// Header component used for navigation and language selection.
///
/// Includes a responsive layout for links to the Nonogram Solver and Editor,
/// as well as a dropdown for switching application languages.
///
/// ### TODO
/// - Fix the layout for smaller screens or mobile devices.
#[component]
fn Header() -> Element {
    let mut i18n = i18n();

    // Event handler to change the current language based on user selection.
    let change_language = move |event: FormEvent| {
        info!("Changed language to: {}", event.value());
        match event.value().as_str() {
            "en-US" => i18n.set_language(EN_US),
            "es-MX" => i18n.set_language(ES_MX),
            _ => {}
        }
    };

    // Helper function to format the current language as a string.
    fn get_language(mut i18n: I18n) -> String {
        let lang = i18n.language();
        format!(
            "{}-{}",
            lang.language.as_str(),
            if let Some(l) = lang.region {
                l.as_str().to_string()
            } else {
                "".to_string()
            }
        )
    }

    // Render the header with navigation links and language selection.
    rsx! {
        div { class: "mx-auto flex items-center justify-between py-4 px-6 bg-gray-800",
            div { class: "text-white text-2xl font-bold",
                Link { to: Route::Solver {}, "NGRAM" }
            }
            div { class: "flex-1 mx-4 overflow-x-auto whitespace-nowrap flex items-center gap-2",
                Link {
                    to: Route::Solver {},
                    class: "inline-block text-white text-xl",
                    {t!("title_nonogram_solver")}
                }
                span { class: "text-white", "|" }
                Link {
                    to: Route::Editor {},
                    class: "inline-block text-white text-xl",
                    {t!("title_nonogram_editor")}
                }
            }
            select {
                class: "appearance-none bg-gray-700 text-white border border-gray-600 rounded-md p-2 hover:bg-gray-600 transition ease-in-out duration-200",
                value: "{get_language(i18n)}",
                onchange: change_language,
                option { value: "en-US", {t!("lang_en_US")} }
                option { value: "es-MX", {t!("lang_es_MX")} }
            }
        }
        Outlet::<Route> {}
    }
}
